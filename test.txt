package main

import (
	"encoding/binary"
	"log"
	"net"
	"os/exec"
	"time"
)

func primary(start int, udpBroadcast *net.UDPConn) {

	newBackup := exec.Command("gnome-terminal", "-x", "sh", "-c", "go run backup.go")
	err := newBackup.Run()
	if err != nil {
		log.Fatal(err)
	}

	msg := make([]byte, 1)

	for i := start; ; i++ {
		log.Println(i)
		msg[0] = byte(i)
		udpBroadcast.Write(msg)
		time.Sleep(100 * time.Millisecond)
	}

}

func backup(udpListen *net.UDPConn) int {
	listenChan := make(chan int, 1)
	backupvalue := 0
	go listen(listenChan, udpListen)
	for {
		select {
		case backupvalue = <-listenChan:
			time.Sleep(50 * time.Millisecond)
			break
		case <-time.After(1 * time.Second):
			log.Println("The primary is dead, long live the primary")
			return backupvalue
		}
	}

}

func listen(listenChan chan int, udpListen *net.UDPConn) {

	buffer := make([]byte, 1024)

	for {
		udpListen.ReadFromUDP(buffer[:])
		//if err != nil {log.Fatal(err)}

		listenChan <- int(binary.LittleEndian.Uint64(buffer)) //convert an bytearray to int
		time.Sleep(100 * time.Millisecond)
	}

}

func main() {

	udpAddr, err := net.ResolveUDPAddr("udp", ":20014")
	if err != nil {
		log.Fatal(err)
	}

	udpListen, err := net.ListenUDP("udp", udpAddr)
	if err != nil {
		log.Fatal(err)
	}

	backupvalue := backup(udpListen)

	udpListen.Close()

	udpAddr, err = net.ResolveUDPAddr("udp", "129.241.187.255:20005")
	if err != nil {
		log.Fatal(err)
	}

	udpBroadcast, err := net.DialUDP("udp", nil, udpAddr)
	if err != nil {
		log.Fatal(err)
	}

	primary(backupvalue, udpBroadcast)

	udpBroadcast.Close()

}

//10.100.23.241:45123 fra udp
//10.100.23.11:34933 fra tcp

package main

import (
	"log"
	"net"
	"time"
)

func Receiver(socket *net.TCPConn) {
	var buffer [1024]byte
	for {
		_, err := socket.Read(buffer[:])
		if err != nil {
			log.Fatal(err)
		}
		log.Println(string(buffer[:]))

		_, err = socket.Write([]byte("Hei\x00"))
		if err != nil {
			log.Fatal(err)
		}

		time.Sleep(2 * time.Second)
	}
}

func Listener(socket_connect *net.TCPConn) {
	var buffer [1024]byte
	for {
		_, err := socket_connect.Read(buffer[:])
		if err != nil {
			log.Fatal(err)
		}
		log.Println(string(buffer[:]))

		_, err = socket_connect.Write([]byte("Hade\x00"))
		if err != nil {
			log.Fatal(err)
		}

		time.Sleep(2 * time.Second)
	}
}

func main() {
	reciver_addr, err := net.ResolveTCPAddr("tcp", "10.100.23.11:34933")
	if err != nil {
		log.Fatal(err)
	}

	socket_reciver, err := net.DialTCP("tcp", nil, reciver_addr)
	if err != nil {
		log.Fatal(err)
	}

	//make listener
	listener_addr, err := net.ResolveTCPAddr("tcp", "10.100.23.11:20005")
	if err != nil {
		log.Fatal(err)
	}

	listener, err := net.ListenTCP("tcp", listener_addr)
	if err != nil {
		log.Fatal(err)
	}

	//server connect back
	_, err = socket_reciver.Write([]byte("Connect to: 10.100.23.11:20005\x00"))
	if err != nil {
		log.Fatal(err)
	}

	socket_listener, err := listener.AcceptTCP()
	if err != nil {
		log.Fatal(err)
	}

	go Receiver(socket_reciver)
	go Listener(socket_listener)
}
